---
// Fundations
import BaseLayout from "@/layouts/BaseLayout.astro";
// Sections
import Hero1 from "@/components/heros/Hero1.astro";
import Hero2 from "@/components/heros/Hero2.astro";
import LogoCloud1 from "@/components/testimonials/LogoCloud1.astro";
import Feature1 from "@/components/features/Feature1.astro";
import Feature2 from "@/components/features/Feature2.astro";
import Feature3 from "@/components/features/Feature3.astro";
import Feature4 from "@/components/features/Feature4.astro";
import Cta1 from "@/components/ctas/Cta1.astro";
import Pricing1 from "@/components/pricing/Pricing1.astro";
import Testimonial1 from "@/components/testimonials/Testimonial1.astro";

// Sanity
import { sanityClient } from "@/data/sanity/fetch";
import { HERO_FIELDS } from "@/data/sanity/groq";

type Hero = {
  _type: "hero1" | "hero2";
  children?: any[];
};

const homeSlugCandidates = ["/", "home", "index"] as const;

const query = `*[_type == "page" && slug.current in $slugs]{
  slug,
  sections[]{
    ${HERO_FIELDS}
  }
}`;

type PageDoc = { slug?: { current?: string }; sections?: any[] };

const pages = (await sanityClient
  .fetch<PageDoc[]>(query, { slugs: homeSlugCandidates })
  .catch((err) => {
    console.error("[Sanity] Fetch error for home slugs:", err?.message || err);
    return [] as PageDoc[];
  })) as PageDoc[];

// Pick the first page matching our preferred slug order
const selectedPage = homeSlugCandidates
  .map((s) => pages.find((p) => p?.slug?.current === s))
  .find((p) => !!p) || null;

const heroSections: Hero[] = Array.isArray(selectedPage?.sections)
  ? selectedPage.sections.filter((s: any) => s?._type === "hero1" || s?._type === "hero2")
  : [];

// Minimal debug: summarize what we received from Sanity
try {
  const debugSummary = {
    triedSlugs: [...homeSlugCandidates],
    foundPages: pages.map((p) => p?.slug?.current),
    selectedSlug: selectedPage?.slug?.current ?? null,
    sectionsCount: Array.isArray(selectedPage?.sections) ? selectedPage.sections.length : 0,
    sectionTypes: Array.isArray(selectedPage?.sections)
      ? selectedPage.sections.map((s: any) => s?._type)
      : null,
    heroSectionsCount: heroSections.length,
    heroTypes: heroSections.map((h: any) => h?._type),
    imageItems: Array.isArray(selectedPage?.sections)
      ? selectedPage.sections
          .flatMap((s: any) => Array.isArray(s?.children) ? s.children : [])
          .filter((c: any) => c?._type === "uiImage")
          .map((img: any) => ({
            hasAsset: !!img?.image?.asset?._ref,
            width: img?.width,
            height: img?.height,
            alt: img?.image?.alt || null,
          }))
      : [],
  };
  console.debug("[Sanity] Home page resolution:", debugSummary);
  if (!selectedPage) {
    console.warn("[Sanity] No home page found for any of:", homeSlugCandidates);
  } else if (debugSummary.heroSectionsCount === 0) {
    console.warn("[Sanity] No hero sections found on home page slug:", debugSummary.selectedSlug);
  }
} catch {}
---

<BaseLayout>

  {heroSections.length > 0 && (
    heroSections.map((section) => (
      section._type === "hero1" ? <Hero1 hero={section} /> :
      section._type === "hero2" ? <Hero2 hero={section} /> : null
    ))
  )}

  <LogoCloud1 />
  <Feature1 />
  <Feature2 />
  <Feature3 />
  <Feature4 />
  <Cta1 />
  <Pricing1 />
  <Testimonial1 />
  <LogoCloud1 />

</BaseLayout>
