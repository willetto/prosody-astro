---
import BaseLayout from "@/layouts/BaseLayout.astro";

import Hero1 from "@/components/heros/Hero1.astro";
import Hero2 from "@/components/heros/Hero2.astro";
import Feature1 from "@/components/features/Feature1.astro";
import Feature2 from "@/components/features/Feature2.astro";
import Feature3 from "@/components/features/Feature3.astro";
import Feature4 from "@/components/features/Feature4.astro";
import Feature5 from "@/components/features/Feature5.astro";
import Feature6 from "@/components/features/Feature6.astro";
import Feature7 from "@/components/features/Feature7.astro";
import Testimonial1 from "@/components/testimonials/Testimonial1.astro";
import Testimonial2 from "@/components/testimonials/Testimonial2.astro";
import LogoCloud1 from "@/components/testimonials/LogoCloud1.astro";
import LogoCloud2 from "@/components/testimonials/LogoCloud2.astro";
import LogoCloud3 from "@/components/testimonials/LogoCloud3.astro";
import RichText from "@/components/RichText.astro";
import Text from "@/components/foundations/elements/Text.astro";
import PortableText from "@/components/foundations/elements/PortableText.astro";
import SanityImage from "@/components/foundations/elements/SanityImage.astro";
import Link from "@/components/foundations/elements/Link.astro";
import ArrowRight from "@/components/foundations/icons/ArrowRight.astro";

import { fetchAllCaseStudies, fetchCaseStudyBySlug } from "@/data/sanity/fetch";
import Breadcrumbs from "@/components/foundations/elements/Breadcrumbs.astro";
import Wrapper from "@/components/foundations/containers/Wrapper.astro";

export async function getStaticPaths() {
  const items = await fetchAllCaseStudies();
  return items.map((item) => ({ params: { slug: String(item.slug) } }));
}

const params = Astro.params;
const slug = Array.isArray(params.slug) ? params.slug.join("/") : params.slug || "";
const caseStudy = await fetchCaseStudyBySlug(slug);

const sections = Array.isArray(caseStudy?.sections) ? caseStudy.sections : [];

const sectionComponents = {
  hero1: Hero1,
  hero2: Hero2,
  feature1: Feature1,
  feature2: Feature2,
  feature3: Feature3,
  feature4: Feature4,
  feature5: Feature5,
  feature6: Feature6,
  feature7: Feature7,
  testimonial1: Testimonial1,
  testimonial2: Testimonial2,
  logoCloud1: LogoCloud1,
  logoCloud2: LogoCloud2,
  logoCloud3: LogoCloud3,
  richText: RichText,
} as const;
---

<BaseLayout>
  <Wrapper variant="standard" class="pt-12 pb-16">
    <Breadcrumbs />
    <div class="metafields flex flex-col items-stretch lg:flex-row gap-8 lg:gap-12  mt-4 lg:mt-8">
      <div class="flex flex-1 flex-col justify-between">
        <Text tag="h1" variant="displayLG" class="font-serif font-medium tracking-tight brand-heading-color">{caseStudy?.title}</Text>
        {Array.isArray(caseStudy?.metafields) && caseStudy.metafields.length > 0 ? (
          <dl class="flex flex-col mt-8 divide-y divide-base-200">
            {caseStudy.metafields.map((detail) => (
              <div class="flex items-center justify-between py-2 gap-2">
                <dt>
                  <Text
                    tag="h4"
                    variant="textSM"
                    class="font-medium text-heading-text-color"
                  >
                    {detail?.name}
                  </Text>
                </dt>
                <dd class="brand-text-color lg:text-balance">
                  <PortableText value={detail?.value} />
                </dd>
              </div>
            ))}
          </dl>
        ) : null}
        {caseStudy?.websiteLink ? (
          <div class="mt-4">
            <Link href={caseStudy.websiteLink} variant="accent" size="sm" target="_blank" rel="noopener noreferrer" class="w-full lg:w-1/2 group/btn" gap="xxs">
              Visit the site
              <span slot="right-icon" class="ml-2">
                <ArrowRight
                      slot="right-icon"
                      size="sm"
                      class="transition-transform duration-300 translate-x-0 group-hover/btn:translate-x-2 group-focus/btn:translate-x-2 group-focus-visible/btn:translate-x-2"
                    />
              </span>
            </Link>
          </div>
        ) : null}
      </div>

      {/** Highlighted image (fallback to socialImage) */}
      {(() => {
        const img = caseStudy?.highlightedImage?.asset?._ref
          ? caseStudy?.highlightedImage
          : caseStudy?.socialImage;
        return img?.asset?._ref ? (
          <div class="flex-1 lg:mt-0">
            <div class="w-full aspect-[16/9] rounded-xl shadow-sm overflow-hidden">
              <SanityImage image={img} class="w-full h-full object-cover rounded-xl" />
            </div>
          </div>
        ) : null;
      })()}
    </div>
  </Wrapper>
  {sections.map((section) => {
    const Component = sectionComponents[section._type];
    if (!Component) return null;
    return <Component feature={section} />;
  })}
</BaseLayout>


