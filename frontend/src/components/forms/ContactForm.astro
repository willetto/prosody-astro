---
// Assets
import Text from "@/components/foundations/elements/Text.astro";
import Button from "@/components/foundations/elements/Button.astro";

interface Props {
  feature: {
    _type: "contactForm";
    header?: string;
    subheading?: any[]; // Portable text blocks
    successMessage?: string;
  };
}

const { feature } = Astro.props;
---

<section class="w-full bg-sand-100">
  <div class="flex items-center justify-center w-full p-8">
    <div class="w-full max-w-md py-24 lg:py-32">
      {feature.header && (
        <div class="text-center">
          <Text
            tag="h2"
            variant="displayMD"
            class="font-serif font-medium tracking-tight brand-heading-color"
          >
            {feature.header}
          </Text>
          {feature.subheading && (
            <Text
              tag="p"
              variant="textBase"
              class="max-w-xl mx-auto mt-4 brand-text-color text-balance"
            >
              {feature.subheading}
            </Text>
          )}
        </div>
      )}
      
      <form 
        name="contact" 
        method="POST" 
        data-netlify="true"
        data-netlify-honeypot="bot-field"
        class="mt-10 space-y-4"
        id="contact-form"
      >
        <!-- Hidden input for Netlify form identification -->
        <input type="hidden" name="form-name" value="contact" />
        
        <!-- Honeypot field for spam protection -->
        <p style="display: none;">
          <label>Don't fill this out if you're human: <input name="bot-field" /></label>
        </p>
        
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div class="w-full">
            <div class="flex items-baseline justify-between mb-1">
              <label for="firstName" class="text-sm font-medium brand-text-color">
                First Name
              </label>
            </div>
            <div class="relative z-0 focus-within:z-10">
              <input
                id="firstName"
                name="firstName"
                type="text"
                required
                placeholder="Jane"
                class="block w-full px-4 py-2 text-xs leading-tight align-middle bg-white border border-transparent transition duration-300 ease-in-out focus:z-10 h-9 rounded-md brand-text-color ring-1 ring-base-200 placeholder-base-400 focus:border-accent-500 focus:ring-accent-100 focus:ring-2 focus:outline-none shadow-sm"
              />
            </div>
          </div>
          
          <div class="w-full">
            <div class="flex items-baseline justify-between mb-1">
              <label for="lastName" class="text-sm font-medium brand-text-color">
                Last Name
              </label>
            </div>
            <div class="relative z-0 focus-within:z-10">
              <input
                id="lastName"
                name="lastName"
                type="text"
                required
                placeholder="Doe"
                class="block w-full px-4 py-2 text-xs leading-tight align-middle bg-white border border-transparent transition duration-300 ease-in-out focus:z-10 h-9 rounded-md brand-text-color ring-1 ring-base-200 placeholder-base-400 focus:border-accent-500 focus:ring-accent-100 focus:ring-2 focus:outline-none shadow-sm"
              />
            </div>
          </div>
        </div>

        <div class="w-full">
          <div class="flex items-baseline justify-between mb-1">
            <label for="email" class="text-sm font-medium brand-text-color">
              Email Address
            </label>
          </div>
          <div class="relative z-0 focus-within:z-10">
            <input
              id="email"
              name="email"
              type="email"
              required
              placeholder="you@example.com"
              class="block w-full px-4 py-2 text-xs leading-tight align-middle bg-white border border-transparent transition duration-300 ease-in-out focus:z-10 h-9 rounded-md brand-text-color ring-1 ring-base-200 placeholder-base-400 focus:border-accent-500 focus:ring-accent-100 focus:ring-2 focus:outline-none shadow-sm"
              inputmode="email"
            />
          </div>
        </div>

        <div class="w-full">
          <div class="flex items-baseline justify-between mb-1">
            <label for="message" class="text-sm font-medium brand-text-color">
              Your Message
            </label>
          </div>
          <div class="relative z-0 focus-within:z-10">
            <textarea
              id="message"
              name="message"
              rows="4"
              required
              placeholder="What's on your mind?"
              class="block w-full px-4 py-2 text-xs leading-tight align-middle bg-white border border-transparent transition duration-300 ease-in-out focus:z-10 rounded-md brand-text-color ring-1 ring-base-200 placeholder-base-400 focus:border-accent-500 focus:ring-accent-100 focus:ring-2 focus:outline-none shadow-sm"
            ></textarea>
          </div>
        </div>

        <div id="form-button-container">
          <Button
            size="base"
            variant="accent"
            gap="sm"
            type="submit"
            class="w-full"
          >
            Send Message
          </Button>
        </div>

        <div id="form-success-message" class="hidden">
          <Text
            tag="p"
            variant="textBase"
            class="text-center brand-text-color"
          >
            {feature.successMessage || "Thank you for your message! We'll get back to you soon."}
          </Text>
        </div>
      </form>
    </div>
  </div>
</section>

<script>
  // Handle form submission with inline success message and Pipedrive integration
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const buttonContainer = document.getElementById('form-button-container');
    const successMessage = document.getElementById('form-success-message');

    if (form && buttonContainer && successMessage) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(form);
        const submitButton = buttonContainer.querySelector('button');
        
        // Disable submit button and show loading state
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Sending...';
        }
        
        console.log('[CONTACT-FORM] Starting form submission...');
        
        // Submit to both Netlify Forms (for backup) and our custom function
        Promise.all([
          // Submit to Netlify Forms for spam filtering and backup
          fetch('/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams(formData as any).toString()
          }),
          
          // Submit to our custom function for Pipedrive integration
          fetch('/.netlify/functions/form-submission', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams(formData as any).toString()
          })
        ])
        .then(async ([netlifyResponse, functionResponse]) => {
          console.log('[CONTACT-FORM] Netlify Forms response:', netlifyResponse.status);
          
          // Check custom function response
          if (functionResponse.ok) {
            const functionResult = await functionResponse.json();
            console.log('[CONTACT-FORM] Pipedrive integration success:', functionResult);
          } else {
            const errorResult = await functionResponse.json().catch(() => ({ error: 'Unknown error' }));
            console.warn('[CONTACT-FORM] Pipedrive integration failed:', errorResult);
            // Note: We still show success to user even if Pipedrive fails
            // The form data is captured by Netlify Forms as backup
          }
          
          // Hide button, show success message
          buttonContainer.style.display = 'none';
          successMessage.classList.remove('hidden');
          console.log('[CONTACT-FORM] Form submission completed successfully');
        })
        .catch(error => {
          console.error('[CONTACT-FORM] Form submission error:', error);
          
          // Re-enable button
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = 'Send Message';
          }
          
          alert('There was an error submitting your form. Please try again.');
        });
      });
    }
  });
</script>
