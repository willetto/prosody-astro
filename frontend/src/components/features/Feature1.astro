---
// Assets
import { Code } from "astro:components";
// foundations
import Text from "@/components/foundations/elements/Text.astro";
import Wrapper from "@/components/foundations/containers/Wrapper.astro";
import PortableText from "@/components/foundations/elements/PortableText.astro";
import IconRenderer from "@/components/foundations/elements/IconRenderer.astro";
import type { CodeLanguage } from "astro";

interface Props {
  feature?: {
    header?: string;
    subheading?: any[];
    codeTabs?: Array<{
      id: string;
      label: string;
      icon: {
        assetUrl?: string;
        alt?: string;
      };
      language: string;
      code: string;
    }>;
  };
}

const { feature } = Astro.props;
const { header, subheading, codeTabs = [] } = feature || {};
const tabIds = codeTabs.map((tab) => tab.id);

// Don't render if no feature data
if (!feature || !codeTabs || codeTabs.length === 0) {
  return null;
}
---

<section class="overflow-hidden feature-1">
  <Wrapper variant="standard" class="pt-12 pb-4 border-t">
    {header && (
      <div class="text-center text-balance">
        <Text
          tag="h2"
          variant="displaySM"
          class="font-serif font-medium tracking-tight brand-heading-color feature-header"
        >
          {header}
        </Text>
        {subheading && (
          <div class="max-w-xl mx-auto mt-4 brand-text-color feature-subheading">
            <PortableText value={subheading} />
          </div>
        )}
      </div>
    )}

    <!-- Tabs -->
    <div
      class="flex items-center justify-between w-full py-2 mt-12 overflow-x-scroll gap-3 scrollbar-hide feature-tabs"
    >
      {
        codeTabs.map((tab, i) => (
          <button
            class="flex flex-col items-center w-full cursor-pointer gap-2 feature-tab"
            id={`tab-${tab.id}`}
            data-tab={tab.id}
          >
            <div
              class={`p-2 bg-sand-100 rounded-xl feature-tab-icon ${
                i === 0 ? "opacity-100" : "opacity-50 hover:opacity-100"
              }`}
            >
              <IconRenderer icon={tab.icon} class="mx-auto" />
            </div>
            <span class="mt-2 text-xs brand-text-color feature-tab-label">{tab.label}</span>
          </button>
        ))
      }
    </div>
    <div class="mt-8 -m-4 border-t border-base-200 border-dashed feature-code-container">
      {
        codeTabs.map((tab, index) => (
          <div id={`content-${tab.id}`} class={`${index === 0 ? "" : "hidden"} feature-code-tab`}>
            <div class="h-full overflow-hidden divide-y divide-sand-50">
              <div class="p-4 bg-sand-100 feature-code-header">
                <div class="flex items-center gap-1">
                  <div class="size-2 rounded-full bg-[#ff421e]" />
                  <div class="size-2 rounded-full bg-[#60beff]" />
                  <div class="size-2 rounded-full bg-[#e3962d]" />
                </div>
              </div>
              <Code
                lang={tab.language as CodeLanguage}
                theme="css-variables"
                class="h-full p-4 pl-2 text-xs scrollbar-hide feature-code-content"
                code={tab.code}
              />
            </div>
          </div>
        ))
      }
    </div>

    <!-- JS -->
    <script type="module">
      const tabContainer = document.querySelector('.feature-tabs');
      if (tabContainer) {
        const tabIds = JSON.parse('{JSON.stringify(tabIds)}');
        
        tabIds.forEach((lang) => {
          const button = document.getElementById(`tab-${lang}`);
          if (button) {
            button.addEventListener("click", () => {
              tabIds.forEach((l) => {
                const tabButton = document.getElementById(`tab-${l}`);
                const tabContent = document.getElementById(`content-${l}`);
                if (tabButton) {
                  tabButton.classList.remove("opacity-100");
                  tabButton.classList.add("opacity-50");
                }
                if (tabContent) {
                  tabContent.classList.add("hidden");
                }
              });

              button.classList.remove("opacity-50");
              button.classList.add("opacity-100");
              const content = document.getElementById(`content-${lang}`);
              if (content) {
                content.classList.remove("hidden");
              }
            });
          }
        });
      }
    </script>
  </Wrapper>
</section>
