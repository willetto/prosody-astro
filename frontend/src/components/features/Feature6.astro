---
// Assets
import { Code } from "astro:components";
// foundations
import Text from "@/components/foundations/elements/Text.astro";
import Wrapper from "@/components/foundations/containers/Wrapper.astro";
import PortableText from "@/components/foundations/elements/PortableText.astro";

interface Props {
  feature?: {
    header?: string;
    subheading?: any[];
    codeTabs?: Array<{
      id: string;
      label: string;
      language: string;
      code: string;
    }>;
  };
}

const { feature } = Astro.props;
const { header, subheading, codeTabs = [] } = feature || {};

// Don't render if no feature data
if (!feature || !codeTabs || codeTabs.length === 0) {
  return null;
}
---

<section class="overflow-hidden feature-6">
  <Wrapper variant="standard" class="pt-12 pb-4 border-t">
    {header && (
      <div class="text-center text-balance">
        <Text
          tag="h2"
          variant="displaySM"
          class="font-serif font-medium tracking-tight text-black feature-header"
        >
          {header}
        </Text>
        {subheading && (
          <div class="max-w-xl mx-auto mt-4 text-base-500 feature-subheading">
            <PortableText value={subheading} />
          </div>
        )}
      </div>
    )}

    <div
      class="flex flex-col mt-8 overflow-hidden divide-y divide-sand-50 bg-sand-100 rounded-xl feature-code-container"
    >
      <div class="p-4 bg-sand-100 feature-code-header">
        <div class="flex items-center gap-1">
          <div class="size-2 rounded-full bg-[#ff421e]"></div>
          <div class="size-2 rounded-full bg-[#60beff]"></div>
          <div class="size-2 rounded-full bg-[#e3962d]"></div>
        </div>
      </div>
      <div
        class="grid grid-cols-1 lg:grid-cols-3 lg:divide-x lg:divide-sand-50"
      >
        <div class="flex flex-col p-4 gap-2 feature-tabs">
          {
            codeTabs.map((tab, i) => {
              return (
                <button
                  class="text-xs text-left cursor-pointer text-base-500 feature-tab"
                  id={`tab-${tab.id}`}
                  data-tab={tab.id}
                >
                  {tab.label}
                </button>
              );
            })
          }
        </div>
        <div class="lg:col-span-2 feature-code-content">
          {
            codeTabs.map((tab, index) => (
              <div id={`content-${tab.id}`} class={`${index === 0 ? "" : "hidden"} feature-code-tab`}>
                <div class="h-full overflow-hidden divide-y divide-sand-50">
                  <Code
                    lang={tab.language}
                    theme="css-variables"
                    class="h-full p-4 pl-2 text-xs scrollbar-hide"
                    code={tab.code}
                  />
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>

    <script type="module">
      const tabContainer = document.querySelector('.feature-tabs');
      if (tabContainer) {
        const tabIds = {codeTabs.map(tab => tab.id)};
        
        tabIds.forEach((lang) => {
          const button = document.getElementById(`tab-${lang}`);
          if (button) {
            button.addEventListener("click", () => {
              tabIds.forEach((l) => {
                const tabButton = document.getElementById(`tab-${l}`);
                const tabContent = document.getElementById(`content-${l}`);
                if (tabButton) {
                  tabButton.classList.remove("opacity-100");
                  tabButton.classList.add("opacity-50");
                }
                if (tabContent) {
                  tabContent.classList.add("hidden");
                }
              });

              button.classList.remove("opacity-50");
              button.classList.add("opacity-100");
              const content = document.getElementById(`content-${lang}`);
              if (content) {
                content.classList.remove("hidden");
              }
            });
          }
        });
      }
    </script>
  </Wrapper>
</section>
