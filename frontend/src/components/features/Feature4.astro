---
// foundations
import Text from "@/components/foundations/elements/Text.astro";
import Link from "@/components/foundations/elements/Link.astro";
import Wrapper from "@/components/foundations/containers/Wrapper.astro";
import PortableText from "@/components/foundations/elements/PortableText.astro";
import LucideIcon from "@/components/foundations/elements/LucideIcon.astro";
import SanityImage from "@/components/foundations/elements/SanityImage.astro";
import { type AllowedIcon } from "@/data/constants";

interface Props {
  feature?: {
    header?: string;
    subheading?: any[];
    firstFeature?: {
      icon: string;
      title: string;
      description: any[];
      ctaLabel?: string;
      ctaHref?: string;
      imagePosition: "left" | "right";
      image?: {
        asset?: { _ref?: string };
        assetAltText?: string;
        alt?: string;
      };
    };
  };
}

const { feature } = Astro.props;
const { header, subheading, firstFeature } = feature || {};

// Don't render if no feature data
if (!feature || !firstFeature) {
  return null;
}

const isImageLeft = firstFeature.imagePosition === "left";
---

<section>
  <Wrapper variant="standard" class="py-16 border-b">
    {header && (
      <div class="text-center text-balance mb-12">
        <Text
          tag="h2"
          variant="displaySM"
          class="font-serif font-medium tracking-tight brand-heading-color feature-header"
        >
          {header}
        </Text>
        {subheading && (
          <div class="max-w-xl mx-auto mt-4 brand-text-color feature-subheading">
            <PortableText value={subheading} />
          </div>
        )}
      </div>
    )}

    {firstFeature && (
      <div class="feature-content-grid">
        <div class="feature-text-container">
          <div class="feature-icon-container">
            <LucideIcon icon={firstFeature.icon as AllowedIcon} size="base" class="text-neutral-700" />
          </div>
          <div class="feature-content">
            <Text
              tag="h2"
              variant="displaySM"
              class="font-serif font-medium tracking-tight brand-heading-color feature-title"
            >
              {firstFeature.title}
            </Text>
            <div class="max-w-xl mt-4 brand-text-color feature-description">
              <PortableText value={firstFeature.description} class="whitespace-pre-line" />
            </div>
            {firstFeature.ctaLabel && firstFeature.ctaHref && (
              <div class="flex mt-4">
                <Link size="sm" variant="accent" href={firstFeature.ctaHref}>{firstFeature.ctaLabel}</Link>
              </div>
            )}
          </div>
        </div>
        <div class={`feature-image-container ${isImageLeft ? 'feature-image-left' : 'feature-image-right'} relative  w-full h-full`} >
            {firstFeature.image?.asset?._ref && (
              <SanityImage
                image={firstFeature.image}
                class="absolute inset-0 object-cover w-full h-full rounded-xl shadow-sm"
              />
            )}
          </div>
      </div>
    )}
  </Wrapper>
</section>

<style>
  .feature-content-grid {
    display: grid;
    grid-template-columns: 1fr;
    align-items: center;
    justify-content: center;
    gap: 3rem;
  }

  .feature-image-container {
    height: 100%;
    min-height: 300px;
  }

  .feature-text-container {
    display: flex;
    flex-direction: column;
    text-wrap: pretty;
    gap: 2.5rem;
  }

  .feature-icon-container {
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: rgb(245 245 244);
    width: fit-content;
  }

  /* Responsive styles */
  @media (min-width: 768px) {
    .feature-content-grid {
      grid-template-columns: 1fr 1fr;
      align-items: stretch
    }

    .feature-content-grid:has(.feature-image-left) .feature-text-container {
      order: 2;
    }

    .feature-image-left{
      order: 1;
    }
    
  
  }

  @media (min-width: 1024px) {
    .feature-text-container {
      flex: 1;
    }
    .feature-image-container {
      flex: 1;
    }
  }
</style>