---
import type { CollectionEntry } from "astro:content";
import { getCollection, getEntry } from "astro:content";
import RichText from "../../../components/RichText.astro";
import SanityImage from "../../../components/SanityImage.astro";
import Separator from "../../../components/Separator.astro";
import { getCheckoutLinks } from "../../../data/polar";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { getFormattedPrice } from "../../../utils/getFormattedPrice";

export const getStaticPaths = async () => {
	// Fetch all products from the 'products' collection
	const products = await getCollection("products");

	const paths = await Promise.all(
		products.map(async (product) => {
			const creator = await getEntry("creators", product.data.creator.id);
			return {
				params: {
					creator_id: product.data.creator.id,
					product_id: product.id,
				},
				props: {
					creator,
					product,
				},
			};
		}),
	);

	// Return the generated paths for static page generation
	return paths;
};

type Props = {
	creator: CollectionEntry<"creators">;
	product: CollectionEntry<"products">;
};

const { creator, product } = Astro.props;

const price = getFormattedPrice(product.data.price);

const productCheckoutLink = await getCheckoutLinks([product.data.sku]);
---

<BaseLayout title={product.data.name}>
  <section>
    <header class="title-header">
      <h2>
        {product.data.name}
        <span class="faded">by {creator.data.alias}</span>
      </h2>
      <div><a  class="back" href={`/${creator.id}`}>Back to creator</a></div>
    </header>
    <Separator />
    <div class="content-wrap">
      <SanityImage node={product.data.imageWithAlt} width={1000} fit="contain" aspectRatio="9-16" />
      <div class="content">
        <RichText content={product.data.content}  />
        <!-- <checkout-link data-polar-client-token={productCheckoutLink.clientSecret}> -->
        {productCheckoutLink ?
        <a id="checkout-link" target="_blank" href={productCheckoutLink.initialUrl}>Get A Digital Copy for {price}</a> : null}
        <!-- </checkout-link> -->
      </div>
    </div>
  </section>
</BaseLayout>

<!-- <script>
class CheckoutLink extends HTMLElement {
  private anchor: HTMLAnchorElement | null
  private clientSecret : string | null

  constructor() {
    super();
    this.clientSecret = this.getAttribute('data-polar-client-token');
    this.anchor = this.querySelector('a');
  }

  connectedCallback() {
    this.refreshLink();
  }

  refreshLink = async () => {
    console.log(this.clientSecret);

    const res = await fetch(`https://api.polar.sh/v1/checkouts/client/${this.clientSecret}`, {method: 'GET'})
      .then(response => response.json())
      .catch(err => console.error(err));

    if (res.url && this.anchor) {
      this.anchor.href = res.url;
    }
  }
}

customElements.define('checkout-link', CheckoutLink);
</script> -->
